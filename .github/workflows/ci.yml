name: CI

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.x'
          check-latest: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.x'
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        run: go build ./...

      - name: Test
        # Run tests with sudo for NET_ADMIN capability
        run: sudo -E go test -v -race -cover ./...

  build-cli:
    name: Build icx (${{ matrix.goarch }})
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.x'
          check-latest: true

      - name: Build icx
        working-directory: cli
        env:
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          set -euxo pipefail
          go build -trimpath -ldflags="-s -w" -o icx
          mkdir -p ../dist
          mv icx ../dist/icx_linux_${{ matrix.goarch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: icx_linux_${{ matrix.goarch }}
          path: dist/icx_linux_${{ matrix.goarch }}
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build-cli]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            dist/icx_linux_amd64/icx_linux_amd64
            dist/icx_linux_arm64/icx_linux_arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
