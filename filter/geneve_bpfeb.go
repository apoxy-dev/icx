// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package filter

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type geneveBindKey struct {
	Family uint8
	_      [3]byte
	Addr   [4]uint32
	Port   uint16
	_      [2]byte
}

// loadGeneve returns the embedded CollectionSpec for geneve.
func loadGeneve() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_GeneveBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load geneve: %w", err)
	}

	return spec, err
}

// loadGeneveObjects loads geneve and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*geneveObjects
//	*genevePrograms
//	*geneveMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadGeneveObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadGeneve()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// geneveSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type geneveSpecs struct {
	geneveProgramSpecs
	geneveMapSpecs
	geneveVariableSpecs
}

// geneveProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type geneveProgramSpecs struct {
	XdpSockProg *ebpf.ProgramSpec `ebpf:"xdp_sock_prog"`
}

// geneveMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type geneveMapSpecs struct {
	BindMap    *ebpf.MapSpec `ebpf:"bind_map"`
	QidconfMap *ebpf.MapSpec `ebpf:"qidconf_map"`
	XsksMap    *ebpf.MapSpec `ebpf:"xsks_map"`
}

// geneveVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type geneveVariableSpecs struct {
}

// geneveObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadGeneveObjects or ebpf.CollectionSpec.LoadAndAssign.
type geneveObjects struct {
	genevePrograms
	geneveMaps
	geneveVariables
}

func (o *geneveObjects) Close() error {
	return _GeneveClose(
		&o.genevePrograms,
		&o.geneveMaps,
	)
}

// geneveMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadGeneveObjects or ebpf.CollectionSpec.LoadAndAssign.
type geneveMaps struct {
	BindMap    *ebpf.Map `ebpf:"bind_map"`
	QidconfMap *ebpf.Map `ebpf:"qidconf_map"`
	XsksMap    *ebpf.Map `ebpf:"xsks_map"`
}

func (m *geneveMaps) Close() error {
	return _GeneveClose(
		m.BindMap,
		m.QidconfMap,
		m.XsksMap,
	)
}

// geneveVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadGeneveObjects or ebpf.CollectionSpec.LoadAndAssign.
type geneveVariables struct {
}

// genevePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadGeneveObjects or ebpf.CollectionSpec.LoadAndAssign.
type genevePrograms struct {
	XdpSockProg *ebpf.Program `ebpf:"xdp_sock_prog"`
}

func (p *genevePrograms) Close() error {
	return _GeneveClose(
		p.XdpSockProg,
	)
}

func _GeneveClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed geneve_bpfeb.o
var _GeneveBytes []byte
